<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Categories on Machiaweliczny s0ftwar3 d3v3l0pm3nt discoveries ;)</title>
    <link>http://machiaweliczny.github.io/categories/</link>
    <description>Recent content in Categories on Machiaweliczny s0ftwar3 d3v3l0pm3nt discoveries ;)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Jun 2017 21:21:28 +0200</lastBuildDate>
    
	<atom:link href="http://machiaweliczny.github.io/categories/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://machiaweliczny.github.io/categories/</link>
      <pubDate>Thu, 22 Jun 2017 21:21:28 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/categories/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Editor</title>
      <link>http://machiaweliczny.github.io/categories/editor/</link>
      <pubDate>Sat, 06 Jan 2018 10:56:59 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/categories/editor/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Javascript</title>
      <link>http://machiaweliczny.github.io/categories/javascript/</link>
      <pubDate>Sat, 06 Jan 2018 13:11:11 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/categories/javascript/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Misc</title>
      <link>http://machiaweliczny.github.io/categories/misc/</link>
      <pubDate>Mon, 19 Jun 2017 11:56:55 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/categories/misc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Performance</title>
      <link>http://machiaweliczny.github.io/categories/performance/</link>
      <pubDate>Mon, 19 Jun 2017 17:19:04 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/categories/performance/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Scripting</title>
      <link>http://machiaweliczny.github.io/categories/scripting/</link>
      <pubDate>Mon, 19 Jun 2017 11:56:55 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/categories/scripting/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Vscode</title>
      <link>http://machiaweliczny.github.io/categories/vscode/</link>
      <pubDate>Sat, 06 Jan 2018 13:11:11 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/categories/vscode/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>  <item>
      <title>npm trends</title>
      <link>http://machiaweliczny.github.io/post/npm-trends/</link>
      <pubDate>Sat, 17 Jun 2017 14:22:42 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/npm-trends/</guid>
      <description>When evaluating packages on NPM it&amp;rsquo;s good to check downloads stars and issues that package have and http://www.npmtrends.com/ does exactly that.</description>
    </item>
    
    <item>
      <title>react-komposer</title>
      <link>http://machiaweliczny.github.io/post/react-komposer-post/</link>
      <pubDate>Sat, 17 Jun 2017 14:18:46 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/react-komposer-post/</guid>
      <description>Recently I found quite nice HoC abstracting async data delivery for component. It&amp;rsquo;s called https://github.com/arunoda/react-komposer and I recommend you check it out as it provides clean API for defining async depencencies.</description>
    </item>
    
    <item>
      <title>babel plugin tcomb</title>
      <link>http://machiaweliczny.github.io/post/babel-plugin-tcomb/</link>
      <pubDate>Tue, 04 Apr 2017 09:38:40 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/babel-plugin-tcomb/</guid>
      <description>Recently I&amp;rsquo;ve found nice library to do dynamic typechecking with flow syntax. It&amp;rsquo;s called https://github.com/gcanti/babel-plugin-tcomb It&amp;rsquo;s just babel plugin which parses flow types and converts them into dynamic asserts. Quite usefull for testing IO boundaries.</description>
    </item>
    
    <item>
      <title>3blue1brown math videos</title>
      <link>http://machiaweliczny.github.io/post/3blue1brown_math_videos/</link>
      <pubDate>Fri, 24 Mar 2017 21:26:54 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/3blue1brown_math_videos/</guid>
      <description>I stumbled recently on quite nice math visualization videos by 3blue1brown.
He&amp;rsquo;s most pupular because of &amp;ldquo;essence of linear algebra&amp;rdquo; playlist but I enjoyed riddles the most. I agree with him that in education lack of visualization can make concepts too abstract and hard to digest, so I would like to spread the word about great channel.
And if we are talking about linear algebra:
Another quite good course on linear algebra in on Khan Academy (it might be a little too slow paced but it&amp;rsquo;s good).</description>
    </item>
    
    <item>
      <title>Shorter way of defining reducers and testing them using updeep</title>
      <link>http://machiaweliczny.github.io/post/shorter-way-of-defining-reducers/</link>
      <pubDate>Fri, 24 Mar 2017 19:11:08 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/shorter-way-of-defining-reducers/</guid>
      <description>While exploring discussion issues in redux I found a nice library called updeep and it&amp;rsquo;s use to define reducers.
It looks like this:
import u from &#39;updeep&#39; export const reducer = createReducer({ // [action name]: action =&amp;gt; currentState =&amp;gt; nextState startCompiling: () =&amp;gt; u({ compiling: true }), errorCompiling: ({ error }) =&amp;gt; u({ compiling: false, compileError: error }), startRunning: ({ app }) =&amp;gt; u({ running: () =&amp;gt; app, compiling: false }), stopRunning: () =&amp;gt; u({ running: false }), discardCompileError: () =&amp;gt; u({ compileError: null }), // .</description>
    </item>
    
  </channel>
</rss>