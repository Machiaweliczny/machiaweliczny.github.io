<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Machiaweliczny s0ftwar3 d3v3l0pm3nt discoveries ;)</title>
    <link>http://machiaweliczny.github.io/post/</link>
    <description>Recent content in Posts on Machiaweliczny s0ftwar3 d3v3l0pm3nt discoveries ;)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Feb 2018 00:26:25 +0100</lastBuildDate>
    
	<atom:link href="http://machiaweliczny.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jscodeshift</title>
      <link>http://machiaweliczny.github.io/post/jscodeshift/</link>
      <pubDate>Fri, 09 Feb 2018 00:26:25 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/jscodeshift/</guid>
      <description>If you need to do some bigger refactoring then I can recommend using Jscodeshift which allows you to do AST-to-AST code conversion and pretty prints it. You can read more about it here - https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb
For prototing there&amp;rsquo;s great website called https://astexplorer.net/ where you can test prototype modifications. Remember to use ctrl+space after typing . for avaiable API hints when using first time.
You can see how to write scripts here - https://github.</description>
    </item>
    
    <item>
      <title>Bitscr</title>
      <link>http://machiaweliczny.github.io/post/bitscr/</link>
      <pubDate>Thu, 08 Feb 2018 15:47:31 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/bitscr/</guid>
      <description>Today I stumbled upon https://bitsrc.io/ - seems like nice way to share UI components code across projects/teams. It allows creation of playlists of components which you handle through git repose but there&amp;rsquo;s helper CLI provided.</description>
    </item>
    
    <item>
      <title>React Playground - Preview React in VS Code</title>
      <link>http://machiaweliczny.github.io/post/react-playground-preview-vs-code/</link>
      <pubDate>Thu, 08 Feb 2018 10:42:09 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/react-playground-preview-vs-code/</guid>
      <description>If you need to preview some React components from within VS code then https://marketplace.visualstudio.com/items?itemName=wmira.react-playground-vscode might help. Works only with .jsx files though. I would prefer it to use ParcelJS for example and handle .tsx files also.</description>
    </item>
    
    <item>
      <title>Hyperapp</title>
      <link>http://machiaweliczny.github.io/post/hyperapp/</link>
      <pubDate>Thu, 08 Feb 2018 10:14:29 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/hyperapp/</guid>
      <description>There&amp;rsquo;s quite popular JS lib that&amp;rsquo;s 315 lines of code and has capabilities of react + redux in it. It&amp;rsquo;s called Hyperapp and you can view the code there https://github.com/hyperapp/hyperapp/blob/master/src/index.js. I need to investigate how actions part is done and maybe it&amp;rsquo;s viable solution if you care about minimal size and want something sane.</description>
    </item>
    
    <item>
      <title>Modern Frontend Explained</title>
      <link>http://machiaweliczny.github.io/post/modern-frontend-explained/</link>
      <pubDate>Thu, 08 Feb 2018 08:37:13 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/modern-frontend-explained/</guid>
      <description>There&amp;rsquo;s cool series of articles at medium from Peter Jang explaining evolution of frontend approaches to JS, CSS and structuring applicaitons. I highly recommend it for anyone starting with frontend.
 modern CSS explained modern JS explained comparing frontend approaches  </description>
    </item>
    
    <item>
      <title>State of JS 2017</title>
      <link>http://machiaweliczny.github.io/post/stateofjs2017/</link>
      <pubDate>Sun, 21 Jan 2018 15:32:57 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/stateofjs2017/</guid>
      <description>If you haven&amp;rsquo;t read yet it&amp;rsquo;s good to get through some JS ecosystem surveys like stateofjs or risingstars
The tech I presonally started using recently(after switching to frontend only role) is:
 VS Code - I was using atom before but it felt a little slugish, so after switching to Typescript I started using VS Code and I&amp;rsquo;m happier. Atom keybindings extension made transition painless. Would like to have code outline natively.</description>
    </item>
    
    <item>
      <title>Gitup - best free git GUI for mac</title>
      <link>http://machiaweliczny.github.io/post/gitup/</link>
      <pubDate>Sat, 06 Jan 2018 13:16:26 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/gitup/</guid>
      <description>Hey I wanna share great free git GUI for mac which I like to use and it&amp;rsquo;s not so well known - http://gitup.co/</description>
    </item>
    
    <item>
      <title>VS Code Run Script on Selected Text</title>
      <link>http://machiaweliczny.github.io/post/vs-code-run-script-on-selected-text/</link>
      <pubDate>Sat, 06 Jan 2018 13:11:11 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/vs-code-run-script-on-selected-text/</guid>
      <description>I was looking for ability to run some scripts on selected text on vs-code and couln&amp;rsquo;t find native support for it.
But I&amp;rsquo;ve found not so well know extension which does exactly that - https://marketplace.visualstudio.com/items?itemName=yhirose.FilterText When your script is available in shell you can easily run it on selected text in editor.</description>
    </item>
    
    <item>
      <title>VS Code</title>
      <link>http://machiaweliczny.github.io/post/vscode/</link>
      <pubDate>Sat, 06 Jan 2018 11:00:55 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/vscode/</guid>
      <description>I just want to mention that recently I&amp;rsquo;ve switched fully to VS Code for Typescript development and it&amp;rsquo;s simply great. So if you haven&amp;rsquo;t tried it yet - I can totaly recommend it.
Just remember to click at everthing in &amp;ldquo;Learn&amp;rdquo; in Welcome page as this is great introduction to interface.
There are keymaps(bindings) for other popular editors, so you don&amp;rsquo;t have to learn new keybinding or configure them by yourself.</description>
    </item>
    
    <item>
      <title>Stackblitz</title>
      <link>http://machiaweliczny.github.io/post/stackblitz/</link>
      <pubDate>Sat, 06 Jan 2018 10:56:59 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/stackblitz/</guid>
      <description>I have stumbled upon https://stackblitz.com/ ala JS fiddle online code editor which utilises VS Code and let&amp;rsquo;s you easily share the results. Looks cool and they have designed some new package manager for it - https://medium.com/@ericsimons/introducing-turbo-5x-faster-than-yarn-npm-and-runs-natively-in-browser-cc2c39715403</description>
    </item>
    
    <item>
      <title>Migrating Angularjs to Webpack</title>
      <link>http://machiaweliczny.github.io/post/migrating-angularjs-to-webpack/</link>
      <pubDate>Sat, 06 Jan 2018 10:39:55 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/migrating-angularjs-to-webpack/</guid>
      <description>Recently I had to work on Angularjs(1.X) codebase and I dedided that it needed and update of build process to match modern standards and gain great tooling support that comes with it.
It was using grunt and with the help of these two articles I successfuly migrated to webpack:
 https://medium.com/appifycanada/migrate-to-webpack-from-grunt-bower-legacy-build-system-344526f47873 https://medium.com/eventmobi/how-to-incrementally-switch-to-webpack-203a1b431f7a  As grunt requires files in alphabetical order you have to imitate this with webpack and the most important part of code is this:</description>
    </item>
    
    <item>
      <title>ParcelJs</title>
      <link>http://machiaweliczny.github.io/post/parceljs/</link>
      <pubDate>Sat, 06 Jan 2018 10:18:50 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/parceljs/</guid>
      <description>Recently I tested parceljs - bundler advertised as zero config and it delivered.
Actually I had to do one thing to make it work with typescript: npm i typescript
You simply run it like this parcel index.html and use &amp;lt;script scr=&amp;quot;index.ts&amp;quot; /&amp;gt; inside.
Quite good alternative to webpack for greenfield projects but for more complex/legacy projects I would stay with webpack.</description>
    </item>
    
    <item>
      <title>rendering resource in react</title>
      <link>http://machiaweliczny.github.io/post/rendering-resource-in-react/</link>
      <pubDate>Thu, 22 Jun 2017 21:21:28 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/rendering-resource-in-react/</guid>
      <description>In order to not forget about rendering all states of resource provisioning and handle errors gracefully I introduced react HoC(higher order component) with such props and it&amp;rsquo;s working great:
type ResourceDisplay = {| whenError: Element&amp;lt;*&amp;gt;, whenLoading: Element&amp;lt;*&amp;gt;, whenReady: Element&amp;lt;*&amp;gt;, whenEmpty: Element&amp;lt;*&amp;gt;, isLoading: boolean, isError: boolean, resource: Array&amp;lt;*&amp;gt;, |}`  </description>
    </item>
    
    <item>
      <title>redux batched subscribe</title>
      <link>http://machiaweliczny.github.io/post/redux-batched-subscribe/</link>
      <pubDate>Mon, 19 Jun 2017 17:19:04 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/redux-batched-subscribe/</guid>
      <description>When you have too many dispatches when usign redux performance of rendering might slow down. There&amp;rsquo;s in quite nice store enhancer - https://github.com/tappleby/redux-batched-subscribe that allows to easy debounce notify to improve perf.</description>
    </item>
    
    <item>
      <title>ruby reality</title>
      <link>http://machiaweliczny.github.io/post/ruby-reality/</link>
      <pubDate>Mon, 19 Jun 2017 11:56:55 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/ruby-reality/</guid>
      <description>Today collegue pointed me to cool gem which helps retrieve information from wikipedia: https://github.com/molybdenum-99/reality
This is quite neat and may be usefull for some scripting task.</description>
    </item>
    
    <item>
      <title>typescript runtime typechecking</title>
      <link>http://machiaweliczny.github.io/post/typescript-runtime-typechecking/</link>
      <pubDate>Mon, 19 Jun 2017 11:46:16 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/typescript-runtime-typechecking/</guid>
      <description>I&amp;rsquo;ve found equivalent of babel-plugin-tcomb for TypeScript - https://github.com/fabiandev/ts-runtime
I&amp;rsquo;ve found it in this thread - https://github.com/Microsoft/TypeScript/issues/1573#issuecomment-309359559</description>
    </item>
    
    <item>
      <title>Small git tips</title>
      <link>http://machiaweliczny.github.io/post/git-tip/</link>
      <pubDate>Sun, 18 Jun 2017 15:42:58 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/git-tip/</guid>
      <description>The cool think I didn&amp;rsquo;t knew is that when you type git checkout - it returns to previous branch.
The same applies to shell cd - returns to previous catalog, so you don&amp;rsquo;t have to use pushd path &amp;amp;&amp;amp; popd Also the default for cd is cd ~ [embarased].
And when we are talking about cd - I recommend this great utility tool - https://github.com/rupa/z - it&amp;rsquo;s &amp;ldquo;fuzzy finder&amp;rdquo; for cd</description>
    </item>
    
    <item>
      <title>npm trends</title>
      <link>http://machiaweliczny.github.io/post/npm-trends/</link>
      <pubDate>Sat, 17 Jun 2017 14:22:42 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/npm-trends/</guid>
      <description>When evaluating packages on NPM it&amp;rsquo;s good to check downloads stars and issues that package have and http://www.npmtrends.com/ does exactly that.</description>
    </item>
    
    <item>
      <title>react-komposer</title>
      <link>http://machiaweliczny.github.io/post/react-komposer-post/</link>
      <pubDate>Sat, 17 Jun 2017 14:18:46 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/react-komposer-post/</guid>
      <description>Recently I found quite nice HoC abstracting async data delivery for component. It&amp;rsquo;s called https://github.com/arunoda/react-komposer and I recommend you check it out as it provides clean API for defining async depencencies.</description>
    </item>
    
    <item>
      <title>babel plugin tcomb</title>
      <link>http://machiaweliczny.github.io/post/babel-plugin-tcomb/</link>
      <pubDate>Tue, 04 Apr 2017 09:38:40 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/babel-plugin-tcomb/</guid>
      <description>Recently I&amp;rsquo;ve found nice library to do dynamic typechecking with flow syntax. It&amp;rsquo;s called https://github.com/gcanti/babel-plugin-tcomb It&amp;rsquo;s just babel plugin which parses flow types and converts them into dynamic asserts. Quite usefull for testing IO boundaries.</description>
    </item>
    
    <item>
      <title>3blue1brown math videos</title>
      <link>http://machiaweliczny.github.io/post/3blue1brown_math_videos/</link>
      <pubDate>Fri, 24 Mar 2017 21:26:54 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/3blue1brown_math_videos/</guid>
      <description>I stumbled recently on quite nice math visualization videos by 3blue1brown.
He&amp;rsquo;s most pupular because of &amp;ldquo;essence of linear algebra&amp;rdquo; playlist but I enjoyed riddles the most. I agree with him that in education lack of visualization can make concepts too abstract and hard to digest, so I would like to spread the word about great channel.
And if we are talking about linear algebra:
Another quite good course on linear algebra in on Khan Academy (it might be a little too slow paced but it&amp;rsquo;s good).</description>
    </item>
    
    <item>
      <title>Shorter way of defining reducers and testing them using updeep</title>
      <link>http://machiaweliczny.github.io/post/shorter-way-of-defining-reducers/</link>
      <pubDate>Fri, 24 Mar 2017 19:11:08 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/shorter-way-of-defining-reducers/</guid>
      <description>While exploring discussion issues in redux I found a nice library called updeep and it&amp;rsquo;s use to define reducers.
It looks like this:
import u from &#39;updeep&#39; export const reducer = createReducer({ // [action name]: action =&amp;gt; currentState =&amp;gt; nextState startCompiling: () =&amp;gt; u({ compiling: true }), errorCompiling: ({ error }) =&amp;gt; u({ compiling: false, compileError: error }), startRunning: ({ app }) =&amp;gt; u({ running: () =&amp;gt; app, compiling: false }), stopRunning: () =&amp;gt; u({ running: false }), discardCompileError: () =&amp;gt; u({ compileError: null }), // .</description>
    </item>
    
    <item>
      <title>welcome</title>
      <link>http://machiaweliczny.github.io/post/welcome/</link>
      <pubDate>Mon, 20 Mar 2017 21:42:48 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/welcome/</guid>
      <description>Welcome on my dev blog friends :) Nice to have you on this site!
I plan to write here some hopefully interesting things from time to time, mostly about programming.
Some words about me:
I&amp;rsquo;m Damian, ~24 years old and I&amp;rsquo;m from Poland. I like to code, travel and play computer games.
I work as web developer using mostly Javascript and Ruby and learning Elixir in my spare time.</description>
    </item>
    
  </channel>
</rss>