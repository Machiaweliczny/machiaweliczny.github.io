<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Machiaweliczny s0ftwar3 d3v3l0pm3nt discoveries ;)</title>
    <link>http://machiaweliczny.github.io/</link>
    <description>Recent content on Machiaweliczny s0ftwar3 d3v3l0pm3nt discoveries ;)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Jun 2017 21:21:28 +0200</lastBuildDate>
    
	<atom:link href="http://machiaweliczny.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>rendering resource in react</title>
      <link>http://machiaweliczny.github.io/post/rendering-resource-in-react/</link>
      <pubDate>Thu, 22 Jun 2017 21:21:28 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/rendering-resource-in-react/</guid>
      <description>In order to not forget about rendering all states of resource provisioning and handle errors gracefully I introduced react HoC(higher order component) with such props and it&amp;rsquo;s working great:
type ResourceDisplay = {| whenError: Element&amp;lt;*&amp;gt;, whenLoading: Element&amp;lt;*&amp;gt;, whenReady: Element&amp;lt;*&amp;gt;, whenEmpty: Element&amp;lt;*&amp;gt;, isLoading: boolean, isError: boolean, resource: Array&amp;lt;*&amp;gt;, |}`  </description>
    </item>
    
    <item>
      <title>redux batched subscribe</title>
      <link>http://machiaweliczny.github.io/post/redux-batched-subscribe/</link>
      <pubDate>Mon, 19 Jun 2017 17:19:04 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/redux-batched-subscribe/</guid>
      <description>When you have too many dispatches when usign redux performance of rendering might slow down. There&amp;rsquo;s in quite nice store enhancer - https://github.com/tappleby/redux-batched-subscribe that allows to easy debounce notify to improve perf.</description>
    </item>
    
    <item>
      <title>ruby reality</title>
      <link>http://machiaweliczny.github.io/post/ruby-reality/</link>
      <pubDate>Mon, 19 Jun 2017 11:56:55 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/ruby-reality/</guid>
      <description>Today collegue pointed me to cool gem which helps retrieve information from wikipedia: https://github.com/molybdenum-99/reality
This is quite neat and may be usefull for some scripting task.</description>
    </item>
    
    <item>
      <title>typescript runtime typechecking</title>
      <link>http://machiaweliczny.github.io/post/typescript-runtime-typechecking/</link>
      <pubDate>Mon, 19 Jun 2017 11:46:16 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/typescript-runtime-typechecking/</guid>
      <description>I&amp;rsquo;ve found equivalent of babel-plugin-tcomb for TypeScript - https://github.com/fabiandev/ts-runtime
I&amp;rsquo;ve found it in this thread - https://github.com/Microsoft/TypeScript/issues/1573#issuecomment-309359559</description>
    </item>
    
    <item>
      <title>Small git tips</title>
      <link>http://machiaweliczny.github.io/post/git-tip/</link>
      <pubDate>Sun, 18 Jun 2017 15:42:58 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/git-tip/</guid>
      <description>The cool think I didn&amp;rsquo;t knew is that when you type git checkout - it returns to previous branch.
The same applies to shell cd - returns to previous catalog, so you don&amp;rsquo;t have to use pushd path &amp;amp;&amp;amp; popd Also the default for cd is cd ~ [embarased].
And when we are talking about cd - I recommend this great utility tool - https://github.com/rupa/z - it&amp;rsquo;s &amp;ldquo;fuzzy finder&amp;rdquo; for cd</description>
    </item>
    
    <item>
      <title>npm trends</title>
      <link>http://machiaweliczny.github.io/post/npm-trends/</link>
      <pubDate>Sat, 17 Jun 2017 14:22:42 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/npm-trends/</guid>
      <description>When evaluating packages on NPM it&amp;rsquo;s good to check downloads stars and issues that package have and http://www.npmtrends.com/ does exactly that.</description>
    </item>
    
    <item>
      <title>react-komposer</title>
      <link>http://machiaweliczny.github.io/post/react-komposer-post/</link>
      <pubDate>Sat, 17 Jun 2017 14:18:46 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/react-komposer-post/</guid>
      <description>Recently I found quite nice HoC abstracting async data delivery for component. It&amp;rsquo;s called https://github.com/arunoda/react-komposer and I recommend you check it out as it provides clean API for defining async depencencies.</description>
    </item>
    
    <item>
      <title>babel plugin tcomb</title>
      <link>http://machiaweliczny.github.io/post/babel-plugin-tcomb/</link>
      <pubDate>Tue, 04 Apr 2017 09:38:40 +0200</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/babel-plugin-tcomb/</guid>
      <description>Recently I&amp;rsquo;ve found nice library to do dynamic typechecking with flow syntax. It&amp;rsquo;s called https://github.com/gcanti/babel-plugin-tcomb It&amp;rsquo;s just babel plugin which parses flow types and converts them into dynamic asserts. Quite usefull for testing IO boundaries.</description>
    </item>
    
    <item>
      <title>3blue1brown math videos</title>
      <link>http://machiaweliczny.github.io/post/3blue1brown_math_videos/</link>
      <pubDate>Fri, 24 Mar 2017 21:26:54 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/3blue1brown_math_videos/</guid>
      <description>I stumbled recently on quite nice math visualization videos by 3blue1brown.
He&amp;rsquo;s most pupular because of &amp;ldquo;essence of linear algebra&amp;rdquo; playlist but I enjoyed riddles the most. I agree with him that in education lack of visualization can make concepts too abstract and hard to digest, so I would like to spread the word about great channel.
And if we are talking about linear algebra:
Another quite good course on linear algebra in on Khan Academy (it might be a little too slow paced but it&amp;rsquo;s good).</description>
    </item>
    
    <item>
      <title>Shorter way of defining reducers and testing them using updeep</title>
      <link>http://machiaweliczny.github.io/post/shorter-way-of-defining-reducers/</link>
      <pubDate>Fri, 24 Mar 2017 19:11:08 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/shorter-way-of-defining-reducers/</guid>
      <description>While exploring discussion issues in redux I found a nice library called updeep and it&amp;rsquo;s use to define reducers.
It looks like this:
import u from &#39;updeep&#39; export const reducer = createReducer({ // [action name]: action =&amp;gt; currentState =&amp;gt; nextState startCompiling: () =&amp;gt; u({ compiling: true }), errorCompiling: ({ error }) =&amp;gt; u({ compiling: false, compileError: error }), startRunning: ({ app }) =&amp;gt; u({ running: () =&amp;gt; app, compiling: false }), stopRunning: () =&amp;gt; u({ running: false }), discardCompileError: () =&amp;gt; u({ compileError: null }), // .</description>
    </item>
    
    <item>
      <title>welcome</title>
      <link>http://machiaweliczny.github.io/post/welcome/</link>
      <pubDate>Mon, 20 Mar 2017 21:42:48 +0100</pubDate>
      
      <guid>http://machiaweliczny.github.io/post/welcome/</guid>
      <description>Welcome on my dev blog friends :) Nice to have you on this site!
I plan to write here some hopefully interesting things from time to time, mostly about programming.
Some words about me:
I&amp;rsquo;m Damian, ~24 years old and I&amp;rsquo;m from Poland. I like to code, travel and play computer games.
I work as web developer using mostly Javascript and Ruby and learning Elixir in my spare time.</description>
    </item>
    
  </channel>
</rss>